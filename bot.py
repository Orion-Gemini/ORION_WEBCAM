import os
import asyncio
import base64
import re
from io import BytesIO
from dotenv import load_dotenv

import aiohttp
from telegram import Update, BotCommand, BotCommandScopeAllPrivateChats
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
MAX_HISTORY_MESSAGES = 4
MAX_RETRIES = 3
# –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–æ–ª–≥–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ Gemini
GEMINI_TIMEOUT_SECONDS = 60
# ===============================

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN")
GAS_PROXY_URL = os.getenv("GAS_PROXY_URL")

TOKEN = TOKEN.strip() if TOKEN else None
GAS_PROXY_URL = GAS_PROXY_URL.strip() if GAS_PROXY_URL else None

if not TOKEN or not GAS_PROXY_URL:
    print("–û—à–∏–±–∫–∞: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_TOKEN –∏ GAS_PROXY_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    exit(1)


# === –£–¢–ò–õ–ò–¢–ê: –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï MARKDOWNV2 ===
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –í–ù–ï –∫–æ–¥–∞,
# —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –¥–∞–∂–µ –±–µ–∑ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.
def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.

    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: _, *, [, ], (, ), ~, `, >, #, +, -, =, |, {, }, ., !
    """

    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–£–ñ–ù–û —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ç–µ—Ö, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞.
    escape_chars = r'_*[]()~`>#+-=|{}.!'

    # 1. –ù–∞—Ö–æ–¥–∏–º –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ (```...```)
    code_blocks = re.findall(r"```.*?```", text, re.DOTALL)
    placeholder = "___CODE_BLOCK___"

    # –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º
    text_processed = re.sub(r"```.*?```", placeholder, text, flags=re.DOTALL)

    # 2. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –æ—Å—Ç–∞–≤—à–µ–º—Å—è —Ç–µ–∫—Å—Ç–µ
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à –∏ —Å–∞–º —Å–∏–º–≤–æ–ª
    text_escaped = re.sub(f"([{re.escape(escape_chars)}])", r'\\\1', text_processed)

    # 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤—Å–µ-—Ç–∞–∫–∏ –∏—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞)
    for block in code_blocks:
        text_escaped = text_escaped.replace(placeholder, block, 1)

    return text_escaped


# === Gemini-–ø—Ä–æ–∫—Å–∏ (–ò–°–ü–û–õ–¨–ó–£–ï–¢ gemini-2.5-flash) ===
async def query_gemini(prompt: str, file_data: str = None, mime_type: str = None, history: list = None) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏.
    –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è 5xx –æ—à–∏–±–æ–∫.
    """

    # --- –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø (–£–î–ê–õ–ï–ù–û –¢–†–ï–ë–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–î–ê) ---
    system_instruction_text = (
        "–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è. "
        "–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π. "
        "**–ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –±–ª–æ–∫–∏ –∫–æ–¥–∞ Markdown (—Ç—Ä–æ–π–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ` ``` `) –≤ –æ—Ç–≤–µ—Ç–µ**, "
        "–¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –∫–æ–¥–æ–º. –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç."
    )
    # ----------------------------

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ Contents.
    contents = history if history else []

    # 2. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è (–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏)
    if not history:
        contents.append({
            "role": "user",
            "parts": [{"text": system_instruction_text}]
        })

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ Part'–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user_parts = []

    if file_data and mime_type:
        current_user_parts.append({
            "inlineData": {
                "mimeType": mime_type,
                "data": file_data
            }
        })

    current_user_parts.append({"text": prompt})

    # 4. –î–æ–±–∞–≤–ª—è–µ–º Content —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    contents.append({
        "role": "user",
        "parts": current_user_parts
    })

    payload = {
        "model": "gemini-2.5-flash",
        "args": {
            "contents": contents
        }
    }

    for attempt in range(MAX_RETRIES):
        try:
            async with aiohttp.ClientSession() as s:
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
                async with s.post(GAS_PROXY_URL, json=payload, timeout=GEMINI_TIMEOUT_SECONDS) as r:

                    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (5xx)
                    if r.status >= 500:
                        if attempt < MAX_RETRIES - 1:
                            delay = 1
                            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π 5xx. –ü–∞—É–∑–∞ {delay}s...")
                            await asyncio.sleep(delay)
                            continue
                        else:
                            r.raise_for_status()

                    # 2. –ï—Å–ª–∏ –∫–æ–¥ 4xx, —Å—Ä–∞–∑—É –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    r.raise_for_status()

                    # 3. –ï—Å–ª–∏ –∫–æ–¥ 200, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                    data = await r.json()

                    text = (
                        data.get("candidates", [{}])[0]
                        .get("content", {})
                        .get("parts", [{}])[0]
                        .get("text", "")
                    )
                    return text or data.get("error", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ.")

        # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ (aiohttp) –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
        except (aiohttp.ClientError, asyncio.TimeoutError) as e:
            if attempt < MAX_RETRIES - 1:
                delay = 1
                print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π/—Ç–∞–π–º–∞—É—Ç–æ–º. –ü–∞—É–∑–∞ {delay}s...")
                await asyncio.sleep(delay)
                continue
            else:
                return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–∫—Å–∏ –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: {e}"

        # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        except Exception as e:
            return f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini: {e}"

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."


# === –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Base64 ===
async def _download_file_as_base64(context: ContextTypes.DEFAULT_TYPE, file_id: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ Base64."""
    try:
        file_obj = await context.bot.get_file(file_id)
        download_url = file_obj.file_path

        if not download_url:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        async with aiohttp.ClientSession() as s:
            async with s.get(download_url, timeout=GEMINI_TIMEOUT_SECONDS) as r:
                r.raise_for_status()
                file_bytes = await r.read()

        return base64.b64encode(file_bytes).decode('utf-8')
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Gemini Proxy Bot, —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–∞–π–ª–æ–≤.\n"
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT) —Å –≤–æ–ø—Ä–æ—Å–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/reset ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n\n"
        "üí¨ –í –≥—Ä—É–ø–ø–µ –∏—Å–ø–æ–ª—å–∑—É–π **@**, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª. –ë–æ—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "üñºÔ∏è –ê–Ω–∞–ª–∏–∑: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, TXT) —Å –ø–æ–¥–ø–∏—Å—å—é, **—É–ø–æ–º—è–Ω—É–≤ –±–æ—Ç–∞ (@–≤–∞—à_–±–æ—Ç)**, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    )


async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞."""
    chat_id = update.message.chat_id
    if 'history' in context.chat_data and chat_id in context.chat_data['history']:
        context.chat_data['history'][chat_id] = []
        await update.message.reply_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å—ã –≤ —á–∞—Ç–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö."""
    if not update.message or not update.message.text:
        return

    chat_id = update.message.chat_id

    if 'history' not in context.chat_data:
        context.chat_data['history'] = {}

    chat_history = context.chat_data['history'].get(chat_id, [])

    bot_username = (await context.bot.get_me()).username.lower()
    text = update.message.text

    # –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é
    if update.message.chat.type in ("group", "supergroup"):
        if f"@{bot_username}" not in text.lower():
            return
        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã Gemini –Ω–µ –ø—É—Ç–∞–ª—Å—è
        text = text.replace(f"@{bot_username}", "").strip()

    if not text:
        if update.message.chat.type in ("group", "supergroup"):
            await update.message.reply_text(
                "üí¨ –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–µ–Ω—è!"
            )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ü–µ—á–∞—Ç–∞–µ—Ç..." –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update.message.chat.send_action(action="TYPING")
    status_message = await update.message.reply_text("‚åõ –î—É–º–∞—é...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º query_gemini —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    answer = await query_gemini(text, history=chat_history)

    # --- –õ–û–ì–ò–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò ---
    chat_history.append({
        "role": "user",
        "parts": [{"text": text}]
    })
    chat_history.append({
        "role": "model",
        "parts": [{"text": answer}]
    })

    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_HISTORY_MESSAGES —Ö–æ–¥–æ–≤.
    chat_history = chat_history[-(MAX_HISTORY_MESSAGES):]
    context.chat_data['history'][chat_id] = chat_history
    # ------------------------------------

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ MarkdownV2
    escaped_answer = escape_markdown_v2(answer)

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –î–∞–∂–µ –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–∫–∞–º–∏, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2
        # –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, —ç–∫—Ä–∞–Ω–∏—Ä—É—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.
        await status_message.edit_text(escaped_answer, parse_mode='MarkdownV2')
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ edit_text (MarkdownV2). –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞–Ω–∫–∞–º–∏: {e}")

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        for chunk in [escaped_answer[i:i + 4000] for i in range(0, len(escaped_answer), 4000)]:
            try:
                await update.message.reply_text(chunk, parse_mode='MarkdownV2')
            except Exception as e_reply:
                # –ï—Å–ª–∏ –¥–∞–∂–µ reply_text —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç,
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç.
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ reply_text (MarkdownV2): {e_reply}")
                await update.message.reply_text(
                    "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–æ—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n" + answer)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ (–§–æ—Ç–æ –∏ –î–æ–∫—É–º–µ–Ω—Ç—ã) ===
async def handle_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏—Ö –ø–æ–¥–ø–∏—Å–∏ —Å –ø–æ–º–æ—â—å—é Gemini."""
    if not update.message:
        return

    is_group = update.message.chat.type in ("group", "supergroup")
    bot_username = (await context.bot.get_me()).username
    user_prompt = update.message.caption

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –≥—Ä—É–ø–ø–µ
    if is_group:
        if not user_prompt or f"@{bot_username}" not in user_prompt:
            return
        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        user_prompt = user_prompt.replace(f"@{bot_username}", "").strip()

    file_id = None
    mime_type = None

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª, –µ–≥–æ ID –∏ MIME —Ç–∏–ø
    if update.message.photo:
        largest_photo = update.message.photo[-1]
        file_id = largest_photo.file_id
        mime_type = "image/jpeg"
    elif update.message.document:
        document = update.message.document

        supported_mimes = [
            "image/jpeg",
            "image/png",
            "application/pdf",
            "text/plain",
        ]

        if document.mime_type in supported_mimes:
            file_id = document.file_id
            mime_type = document.mime_type
        else:
            await update.message.reply_text(
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Ç–∏–ø–∞: `{document.mime_type}`. "
                f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, PDF –∏ TXT."
            )
            return
    else:
        return

    # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç: –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç, —Å—Ç–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not user_prompt:
        user_prompt = "–û–ø–∏—à–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –æ—Ç–≤–µ—Ç—å, —á—Ç–æ –Ω–∞ –Ω—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ, –∏–ª–∏ —á—Ç–æ –≤ –Ω—ë–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è."

    # 4. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await update.message.chat.send_action(action="TYPING")
    status_message = await update.message.reply_text(f"1Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Ñ–∞–π–ª ({mime_type})...")

    try:
        # 5. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64
        base64_data = await _download_file_as_base64(context, file_id)

        # 6. –ê–Ω–∞–ª–∏–∑ Gemini
        await update.message.chat.send_action(action="TYPING")
        await status_message.edit_text("2Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é Gemini...")

        answer = await query_gemini(user_prompt, base64_data, mime_type, history=[])

        # 7. –û—Ç–≤–µ—Ç
        escaped_answer = escape_markdown_v2(answer)
        await status_message.edit_text(escaped_answer, parse_mode='MarkdownV2')

    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {str(e)}"
        print(f"File handling error: {e}")
        try:
            await status_message.edit_text(error_msg)
        except Exception:
            await update.message.reply_text(error_msg)


# === –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ ===
async def set_bot_commands(app):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞."""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("reset", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
    ]

    await app.bot.set_my_commands(
        commands,
        scope=BotCommandScopeAllPrivateChats()
    )


# === –ó–∞–ø—É—Å–∫ ===
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º read_timeout –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Å–µ—Ç–µ–≤—ã–º —Å–±–æ—è–º Telegram
    app = ApplicationBuilder().token(TOKEN).concurrent_updates(True).read_timeout(30).build()

    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ===
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("reset", reset_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    file_handler = MessageHandler(
        (filters.PHOTO | filters.Document.ALL) & filters.UpdateType.MESSAGE,
        handle_files
    )
    app.add_handler(file_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.post_init = set_bot_commands

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∞—Ç–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö.")
    app.run_polling()


if __name__ == "__main__":
    main()